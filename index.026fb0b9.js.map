{"mappings":"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","sources":["src/js/util/util.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-b9c255e721789354.js","node_modules/@parcel/runtime-js/lib/runtime-ea41a7c2f14c574c.js","src/js/button_wave.js","src/js/button__more.js","src/js/core/eventable.js","src/js/slide/content.js","src/js/util/viewport-size.js","src/js/slide/zoom-level.js","src/js/slide/loader.js","src/js/core/base.js","src/js/lightbox/lightbox.js","src/js/popap.js","src/js/modal.js","src/js/slick.js","src/js/burger-menu.js"],"sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"g9ByG\"))).then(() => parcelRequire('8j8pF'));","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"5ZPII\\\":\\\"index.026fb0b9.js\\\",\\\"g9ByG\\\":\\\"photoswipe.esm.61f172e0.js\\\"}\"));","// !  подія по кліку\ndocument.addEventListener('click', function (e) {\n  const targetElement = e.target;\n  if (targetElement.closest('[data-ripple')) {\n    // !  Константи\n    const button = targetElement.closest('[data-ripple');\n    const ripple = document.createElement('span');\n    const diameter = Math.max(button.clientWidth, button.clientHeight);\n    const radius = diameter / 2;\n\n    // !  Формування елементу\n    ripple.style.width = ripple.style.height = `${diameter}px`;\n    ripple.style.left = `${\n      e.pageX - (button.getBoundingClientRect().left + scrollX) - radius\n    }px`;\n    ripple.style.top = `${\n      e.pageY - (button.getBoundingClientRect().top + scrollY) - radius\n    }px`;\n    ripple.classList.add('ripple');\n\n    // !  Добавлення елементу\n    button.appendChild(ripple);\n\n    // !  Отримання часу дії анімації\n\n    const timeOut = getAnimationDuration(ripple);\n\n    // !  Видалення елементу\n\n    setTimeout(() => {\n      ripple ? ripple.remove() : null;\n    }, timeOut);\n\n    // ! Функція часу дії\n    function getAnimationDuration() {\n      const aDuration = window.getComputedStyle(ripple).animationDuration;\n      return aDuration.includes('ms')\n        ? aDuration.replace('ms', '')\n        : aDuration.replace('s', '') * 1000;\n    }\n  }\n});\n// !  подія по кліку\ndocument.addEventListener('click', function (e) {\n  const targetElement = e.target;\n  if (targetElement.closest('[data-ripple')) {\n    // !  Константи\n    const button = targetElement.closest('[data-ripple');\n    const ripple = document.createElement('span');\n    const diameter = Math.max(button.clientWidth, button.clientHeight);\n    const radius = diameter / 2;\n\n    // !  Формування елементу\n    ripple.style.width = ripple.style.height = `${diameter}px`;\n    ripple.style.left = `${\n      e.pageX - (button.getBoundingClientRect().left + scrollX) - radius\n    }px`;\n    ripple.style.top = `${\n      e.pageY - (button.getBoundingClientRect().top + scrollY) - radius\n    }px`;\n    ripple.classList.add('ripple');\n\n    // !  Добавлення елементу\n    button.appendChild(ripple);\n\n    // !  Отримання часу дії анімації\n\n    const timeOut = getAnimationDuration(ripple);\n\n    // !  Видалення елементу\n\n    setTimeout(() => {\n      ripple ? ripple.remove() : null;\n    }, timeOut);\n\n    // ! Функція часу дії\n    function getAnimationDuration() {\n      const aDuration = window.getComputedStyle(ripple).animationDuration;\n      return aDuration.includes('ms')\n        ? aDuration.replace('ms', '')\n        : aDuration.replace('s', '') * 1000;\n    }\n  }\n});\n","(() => {\n  const container = document.querySelector('.whats__item__img--leptop');\n  const textSpan = document.querySelector('#span-more');\n\n  container.addEventListener('click', e => {\n    const targetValue = textSpan.classList.toggle('display-nan');\n    if (e.currentTarget.nodeName === 'BUTTON') {\n      console.log(e.currentTarget.nodeName);\n      return targetValue;\n    }\n    return;\n  });\n})();\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  specialKeyUsed,\r\n  getElementsFromOption,\r\n  isPswpClass\r\n} from '../util/util.js';\r\n\r\nimport PhotoSwipeBase from '../core/base.js';\r\nimport { lazyLoadSlide } from '../slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n    this.shouldOpen = false;\r\n    /**\r\n     * @private\r\n     * @type {Content | undefined}\r\n     */\r\n    this._preloadedContent = undefined;\r\n\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp) { // ... if PhotoSwipe is already open\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not the ideal way to detect them.\r\n    //\r\n    /** @type {Point | null} */\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    /** @type {DataSource} */\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   * @returns {number}\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   * @param {Point | null} [initialPoint]\r\n   * @returns {boolean}\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp || !this.options) {\r\n      return false;\r\n    }\r\n\r\n    // Use the first gallery element if dataSource is not provided\r\n    if (!dataSource && this.options.gallery && this.options.children) {\r\n      const galleryElements = getElementsFromOption(this.options.gallery);\r\n      if (galleryElements[0]) {\r\n        dataSource = {\r\n          gallery: galleryElements[0]\r\n        };\r\n      }\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name]?.forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name]?.forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = undefined;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = undefined;\r\n      delete window.pswp;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    this.pswp?.destroy();\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = {};\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeLightbox;\r\n","import PhotoSwipeLightbox from '../../node_modules/photoswipe/dist/photoswipe-lightbox.esm';\n\nconst lightbox = new PhotoSwipeLightbox({\n  gallery: '#my-gallery',\n  children: 'a',\n  pswpModule: () => import('photoswipe'),\n});\n\nlightbox.init();\n","const menuBtnRef = document.querySelector('.wraper');\nconst mobileMenuRef = document.querySelector('#modal');\nconst btnClose = document.querySelector('#close');\nconst bodyHtml = document.querySelector('[data-modaL=\"true\"');\nconst body = document.querySelector('body');\n\nbodyHtml.addEventListener('click', e => {\n  e.preventDefault();\n  if (e.target.id !== \"modal\") {\n    return;\n  }\n  menuBtnRef.classList.toggle('display-nan');\n  body.classList.add('scroll');\n});\n\nmenuBtnRef.addEventListener('click', e => {\n  if (e.target.id !== 'close') {\n    return;\n  }\n  if (e.key === 'ESCAPE') {\n    menuBtnRef.classList.toggle('display-nan');\n    body.classList.remove('scroll');\n  }\n\n  menuBtnRef.classList.toggle('display-nan');\n  body.classList.remove('scroll');\n});\n\nbodyHtml.addEventListener('keydown', e => {\n  e.preventDefault();\n  if (e.key !== 'Escape') {\n    return;\n  }\n  menuBtnRef.classList.add('display-nan');\n  body.classList.remove('scroll');\n});\n","$('.carousel').slick({\n  dots: false,\n  infinite: true,\n  speed: 500,\n  fade: true,\n  cssEase: 'linear',\n  autoplay: true,\n  autoplaySpeed: 2000,\n  infinite: true,\n});\n","const btnBurger = document.querySelector('[data-menu-button]');\nconst modal = document.querySelector('[data-menu]');\n\nbtnBurger.addEventListener('click', () => {\n  modal.classList.toggle('is-open');\n\n});\n"],"names":["$8e220cba11805235$var$createElement","className","tagName","appendToEl","propValue","x","scale","undefined","appendChild","el","$8e220cba11805235$var$setWidthHeight","w","h","width","option","selector","Array","elements","parent","querySelectorAll","$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","module","exports","import","parcelRequire","resolve","then","register","JSON","parse","document","addEventListener","e","targetElement","target","closest","button","ripple","createElement","diameter","Math","max","clientWidth","clientHeight","radius","style","height","left","pageX","getBoundingClientRect","scrollX","top","pageY","scrollY","classList","add","timeOut","aDuration","window","getComputedStyle","animationDuration","includes","replace","getAnimationDuration","setTimeout","remove","container","querySelector","textSpan","targetValue","toggle","currentTarget","nodeName","console","log","$8e220cba11805235$var$LOAD_STATE","$8e220cba11805235$var$getElementsFromOption","legacySelector","priority","pswp","NodeList","isArray","addFilter","_filters","from","$8e220cba11805235$var$isSafari","navigator","vendor","match","$8e220cba11805235$var$PhotoSwipeEvent","this","defaultPrevented","type","dataset","image","sizes","largestUsedSize","details","assign","setDisplayedSize","isAttached","instance","element","placeholder","transformOrigin","transform","ERROR","y","$8e220cba11805235$var$toTransformString","_this$element","parentNode","imageSrc","displayedImageWidth","displayedImageHeight","imgEl","alt","Number","isDecoding","$8e220cba11805235$var$Content","keepPlaceholder","destroy","options","isLazy","reload","slide","usePlaceholder","paddingValue","placeholderEl","paddingFn","viewportSize","itemData","index","innerHeight","data","msrc","isFirstSlide","$8e220cba11805235$var$Placeholder","placeholderSrc","legacyPropName","isImageContent","parsePaddingOption","innerHTML","html","updateContentSize","elementSize","panAreaSize","hRatio","dispatch","content","imageElement","vFill","initial","srcset","_getInitial","secondary","_this$data$src","src","_getMax","_this$data$alt","min","complete","slideData","onload","onLoaded","onerror","optionName","setSlide","currZoomLevel","state","_parseZoomLevelOption","heavyAppended","append","removePlaceholder","fill","isError","getViewportSize","zoomLevel","numItems","dataSource","items","_getGalleryDOMElements","isInitialSizeUpdate","event","updateSrcsetSizes","applyFilters","Content","sizesWidth","parseInt","String","lazyLoad","load","linkEl","pswpSrcset","hasSlide","thumbnailEl","displayError","getElementsFromOption","galleryElement","onThumbnailsClick","errorMsgEl","innerText","_this$instance$option","_this$instance$option2","errorMsg","specialKeyUsed","clientX","clientY","clickedIndex","getClickedIndex","gallery","supportsDecode","children","childSelector","decode","catch","finally","appendImage","initialPointerPos","preload","holderElement","setAttribute","isPswpClass","pswpModuleType","Promise","promiseArray","mainModule","iterableModules","_openPhotoswipe","uid","_uid","shouldOpen","on","name","filter","fn","_preloadedContent","contentLoader","removeEventListener","newViewportSize","documentElement","_this$_filters$name","_this$_filters$name2","_this$pswp","push","sort","f1","f2","removeFilter","args","_this$_filters$name3","forEach","apply","_this$_listeners$name","_this$pswp2","_listeners","_this$pswp3","listener","off","_this$_listeners$name2","call","ctrlKey","metaKey","altKey","shiftKey","prototype","goTo","pswpModule","init","$8a7e756c566dd1ea$var$menuBtnRef","$8a7e756c566dd1ea$var$bodyHtml","$8a7e756c566dd1ea$var$body","preventDefault","key","$","slick","dots","infinite","speed","fade","cssEase","autoplay","autoplaySpeed","$6442e51d8b52aaf7$var$btnBurger","$6442e51d8b52aaf7$var$modal"],"version":3,"file":"index.026fb0b9.js.map"}